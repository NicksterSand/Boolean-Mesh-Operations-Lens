// -----JS CODE-----
//@input Component.MeshVisual sculptMesh
//@input Component.MeshVisual brushMesh
//@input SceneObject Brush
//@input int StartingBrush

global.touchSystem.touchBlocking = true;
global.touchSystem.enableTouchBlockingException("TouchTypePan", true);
global.touchSystem.enableTouchBlockingException("TouchTypeDoubleTap", true);
global.touchSystem.enableTouchBlockingException("TouchTypeScale", true);

//Define Brush Meshes (0=Box, 1=Sphere, 2=Cylinder, 3=Cone)
var Vertices = [
	[-4.900000, -5.000000, 4.900000, -0.3416, -0.8756, 0.3416, -4.900000, -4.900000, 5.000000, -0.3416, -0.3416, 0.8756, -5.000000, -4.900000, 4.900000, -0.8756, -0.3416, 0.3416, -4.900000, 4.900000, 5.000000, -0.3416, 0.3416, 0.8756, -4.900000, 5.000000, 4.900000, -0.3416, 0.8756, 0.3416, -5.000000, 4.900000, 4.900000, -0.8756, 0.3416, 0.3416, -4.900000, -5.000000, -4.900000, -0.3416, -0.8756, -0.3416, -5.000000, -4.900000, -4.900000, -0.8756, -0.3416, -0.3416, -4.900000, -4.900000, -5.000000, -0.3416, -0.3416, -0.8756, -4.900000, 5.000000, -4.900000, -0.3416, 0.8756, -0.3416, -4.900000, 4.900000, -5.000000, -0.3416, 0.3416, -0.8756, -5.000000, 4.900000, -4.900000, -0.8756, 0.3416, -0.3416, 4.900000, -5.000000, 4.900000, 0.3416, -0.8756, 0.3416, 5.000000, -4.900000, 4.900000, 0.8756, -0.3416, 0.3416, 4.900000, -4.900000, 5.000000, 0.3416, -0.3416, 0.8756, 4.900000, 5.000000, 4.900000, 0.3416, 0.8756, 0.3416, 4.900000, 4.900000, 5.000000, 0.3416, 0.3416, 0.8756, 5.000000, 4.900000, 4.900000, 0.8756, 0.3416, 0.3416, 4.900000, -5.000000, -4.900000, 0.3416, -0.8756, -0.3416, 4.900000, -4.900000, -5.000000, 0.3416, -0.3416, -0.8756, 5.000000, -4.900000, -4.900000, 0.8756, -0.3416, -0.3416, 4.900000, 5.000000, -4.900000, 0.3416, 0.8756, -0.3416, 5.000000, 4.900000, -4.900000, 0.8756, 0.3416, -0.3416, 4.900000, 4.900000, -5.000000, 0.3416, 0.3416, -0.8756],
	[0.000000, 4.619398, -1.913417, 0.0000, 0.9131, -0.4077, 0.000000, 3.535534, -3.535534, 0.0000, 0.6925, -0.7214, 0.000000, 1.913417, -4.619398, 0.0000, 0.3725, -0.9280, 0.000000, -0.000000, -5.000000, 0.0000, 0.0000, -1.0000, 0.000000, -1.913418, -4.619398, 0.0000, -0.3725, -0.9280, 0.889209, 4.619398, -1.694247, 0.1894, 0.9131, -0.3610, 1.643044, 3.535534, -3.130560, 0.3352, 0.6925, -0.6388, 2.146741, 1.913417, -4.090273, 0.4313, 0.3725, -0.8217, 2.323616, -0.000000, -4.427280, 0.4647, 0.0000, -0.8854, 2.146741, -1.913418, -4.090273, 0.4313, -0.3725, -0.8217, 1.643044, -3.535534, -3.130560, 0.3352, -0.6925, -0.6388, 0.889209, -4.619398, -1.694247, 0.1894, -0.9131, -0.3610, -0.000001, 5.000000, -0.000000, 0.0000, 1.0000, 0.0000, 1.574711, 4.619398, -1.086945, 0.3355, 0.9131, -0.2316, 2.909687, 3.535534, -2.008412, 0.5937, 0.6925, -0.4098, 3.801689, 1.913417, -2.624117, 0.7637, 0.3725, -0.5271, 4.114918, -0.000000, -2.840324, 0.8230, 0.0000, -0.5680, 3.801689, -1.913418, -2.624117, 0.7637, -0.3725, -0.5271, 2.909687, -3.535534, -2.008412, 0.5937, -0.6925, -0.4098, 1.574711, -4.619398, -1.086945, 0.3355, -0.9131, -0.2316, 1.899466, 4.619398, -0.230638, 0.4047, 0.9131, -0.0491, 3.509755, 3.535534, -0.426162, 0.7161, 0.6925, -0.0869, 4.585716, 1.913417, -0.556807, 0.9212, 0.3725, -0.1119, 4.963543, -0.000000, -0.602684, 0.9927, 0.0000, -0.1205, 4.585716, -1.913418, -0.556807, 0.9212, -0.3725, -0.1119, 3.509755, -3.535534, -0.426162, 0.7161, -0.6925, -0.0869, 1.899466, -4.619398, -0.230638, 0.4047, -0.9131, -0.0491, 1.789076, 4.619398, 0.678506, 0.3812, 0.9131, 0.1445, 3.305781, 3.535534, 1.253717, 0.6746, 0.6925, 0.2558, 4.319211, 1.913417, 1.638060, 0.8677, 0.3725, 0.3291, 4.675080, -0.000000, 1.773023, 0.9350, 0.0000, 0.3546, 4.319211, -1.913418, 1.638060, 0.8677, -0.3725, 0.3291, 3.305781, -3.535534, 1.253717, 0.6746, -0.6925, 0.2558, 1.789076, -4.619398, 0.678506, 0.3812, -0.9131, 0.1445, 1.268830, 4.619398, 1.432212, 0.2703, 0.9131, 0.3051, 2.344492, 3.535534, 2.646384, 0.4784, 0.6925, 0.5400, 3.063226, 1.913417, 3.457667, 0.6154, 0.3725, 0.6946, 3.315612, -0.000000, 3.742552, 0.6631, 0.0000, 0.7485, 3.063226, -1.913418, 3.457667, 0.6154, -0.3725, 0.6946, 2.344492, -3.535534, 2.646384, 0.4784, -0.6925, 0.5400, 1.268830, -4.619398, 1.432212, 0.2703, -0.9131, 0.3051, 0.457911, 4.619398, 1.857816, 0.0975, 0.9131, 0.3958, 0.846108, 3.535534, 3.432797, 0.1726, 0.6925, 0.7005, 1.105494, 1.913417, 4.485165, 0.2221, 0.3725, 0.9010, 1.196578, -0.000000, 4.854707, 0.2393, 0.0000, 0.9709, 1.105494, -1.913418, 4.485165, 0.2221, -0.3725, 0.9010, 0.846108, -3.535534, 3.432797, 0.1726, -0.6925, 0.7005, 0.457911, -4.619398, 1.857816, 0.0975, -0.9131, 0.3958, -0.457911, 4.619398, 1.857816, -0.0975, 0.9131, 0.3958, -0.846109, 3.535534, 3.432797, -0.1726, 0.6925, 0.7005, -1.105494, 1.913417, 4.485165, -0.2221, 0.3725, 0.9010, -1.196578, -0.000000, 4.854707, -0.2393, 0.0000, 0.9709, -1.105494, -1.913418, 4.485165, -0.2221, -0.3725, 0.9010, -0.846109, -3.535534, 3.432797, -0.1726, -0.6925, 0.7005, -0.457911, -4.619398, 1.857816, -0.0975, -0.9131, 0.3958, 0.000000, -5.000000, -0.000001, 0.0000, -1.0000, 0.0000, -1.268830, 4.619398, 1.432212, -0.2703, 0.9131, 0.3051, -2.344493, 3.535534, 2.646384, -0.4784, 0.6925, 0.5400, -3.063227, 1.913417, 3.457667, -0.6154, 0.3725, 0.6946, -3.315612, -0.000000, 3.742552, -0.6631, 0.0000, 0.7485, -3.063227, -1.913418, 3.457667, -0.6154, -0.3725, 0.6946, -2.344493, -3.535534, 2.646384, -0.4784, -0.6925, 0.5400, -1.268830, -4.619398, 1.432212, -0.2703, -0.9131, 0.3051, -1.789076, 4.619398, 0.678506, -0.3812, 0.9131, 0.1445, -3.305782, 3.535534, 1.253717, -0.6746, 0.6925, 0.2558, -4.319211, 1.913417, 1.638060, -0.8677, 0.3725, 0.3291, -4.675080, -0.000000, 1.773023, -0.9350, 0.0000, 0.3546, -4.319211, -1.913418, 1.638060, -0.8677, -0.3725, 0.3291, -3.305782, -3.535534, 1.253717, -0.6746, -0.6925, 0.2558, -1.789076, -4.619398, 0.678506, -0.3812, -0.9131, 0.1445, -1.899466, 4.619398, -0.230638, -0.4047, 0.9131, -0.0491, -3.509756, 3.535534, -0.426162, -0.7161, 0.6925, -0.0869, -4.585716, 1.913417, -0.556808, -0.9212, 0.3725, -0.1119, -4.963543, -0.000000, -0.602684, -0.9927, 0.0000, -0.1205, -4.585716, -1.913418, -0.556808, -0.9212, -0.3725, -0.1119, -3.509756, -3.535534, -0.426162, -0.7161, -0.6925, -0.0869, -1.899466, -4.619398, -0.230638, -0.4047, -0.9131, -0.0491, -1.574711, 4.619398, -1.086945, -0.3355, 0.9131, -0.2316, -2.909687, 3.535534, -2.008413, -0.5937, 0.6925, -0.4098, -3.801689, 1.913417, -2.624117, -0.7637, 0.3725, -0.5271, -4.114918, -0.000000, -2.840324, -0.8230, 0.0000, -0.5680, -3.801689, -1.913418, -2.624117, -0.7637, -0.3725, -0.5271, -2.909687, -3.535534, -2.008413, -0.5937, -0.6925, -0.4098, -1.574711, -4.619398, -1.086945, -0.3355, -0.9131, -0.2316, -0.889209, 4.619398, -1.694247, -0.1894, 0.9131, -0.3610, -1.643044, 3.535534, -3.130560, -0.3352, 0.6925, -0.6388, -2.146741, 1.913417, -4.090273, -0.4313, 0.3725, -0.8217, -2.323615, -0.000000, -4.427280, -0.4647, 0.0000, -0.8854, -2.146741, -1.913418, -4.090273, -0.4313, -0.3725, -0.8217, -1.643044, -3.535534, -3.130560, -0.3352, -0.6925, -0.6388, -0.889209, -4.619398, -1.694247, -0.1894, -0.9131, -0.3610, 0.000000, -3.535534, -3.535534, 0.0000, -0.6925, -0.7214, 0.000000, -4.619398, -1.913417, 0.0000, -0.9131, -0.4077],
	[0.000000, -5.000000, 0.000000, 0.0000, -1.0000, 0.0000, 0.000000, 5.000000, 0.000000, 0.0000, 1.0000, 0.0000, 0.000000, -5.000000, -5.000000, 0.0000, -0.6532, -0.7571, 0.000000, 5.000000, -5.000000, 0.0000, 0.6532, -0.7571, 2.500000, -5.000000, -4.330127, 0.3786, -0.6532, -0.6557, 2.500000, 5.000000, -4.330127, 0.3786, 0.6532, -0.6557, 4.330127, -5.000000, -2.500000, 0.6557, -0.6532, -0.3786, 4.330127, 5.000000, -2.500000, 0.6557, 0.6532, -0.3786, 5.000000, -5.000000, 0.000000, 0.7571, -0.6532, 0.0000, 5.000000, 5.000000, 0.000000, 0.7571, 0.6532, 0.0000, 4.330127, -5.000000, 2.500000, 0.6557, -0.6532, 0.3786, 4.330127, 5.000000, 2.500000, 0.6557, 0.6532, 0.3786, 2.500000, -5.000000, 4.330127, 0.3786, -0.6532, 0.6557, 2.500000, 5.000000, 4.330127, 0.3786, 0.6532, 0.6557, 0.000001, -5.000000, 5.000000, 0.0000, -0.6532, 0.7571, 0.000001, 5.000000, 5.000000, 0.0000, 0.6532, 0.7571, -2.499999, -5.000000, 4.330128, -0.3786, -0.6532, 0.6557, -2.499999, 5.000000, 4.330128, -0.3786, 0.6532, 0.6557, -4.330126, -5.000000, 2.500001, -0.6557, -0.6532, 0.3786, -4.330126, 5.000000, 2.500001, -0.6557, 0.6532, 0.3786, -5.000000, -5.000000, 0.000002, -0.7571, -0.6532, 0.0000, -5.000000, 5.000000, 0.000002, -0.7571, 0.6532, 0.0000, -4.330129, -5.000000, -2.499997, -0.6557, -0.6532, -0.3786, -4.330129, 5.000000, -2.499997, -0.6557, 0.6532, -0.3786, -2.500003, -5.000000, -4.330125, -0.3786, -0.6532, -0.6557, -2.500003, 5.000000, -4.330125, -0.3786, 0.6532, -0.6557, 0.000000, -4.859922, -5.000000, 0.0000, 0.0000, -1.0000, 0.000000, 4.859924, -5.000000, 0.0000, 0.0000, -1.0000, 2.500000, 4.859923, -4.330127, 0.5000, 0.0000, -0.8660, 2.500000, -4.859923, -4.330127, 0.5000, 0.0000, -0.8660, 4.330127, 4.859923, -2.500000, 0.8660, 0.0000, -0.5000, 4.330127, -4.859923, -2.500000, 0.8660, 0.0000, -0.5000, 5.000000, 4.859923, 0.000000, 1.0000, 0.0000, 0.0000, 5.000000, -4.859923, 0.000000, 1.0000, 0.0000, 0.0000, 4.330127, 4.859923, 2.500000, 0.8660, 0.0000, 0.5000, 4.330127, -4.859923, 2.500000, 0.8660, 0.0000, 0.5000, 2.500000, 4.859923, 4.330127, 0.5000, 0.0000, 0.8660, 2.500000, -4.859923, 4.330127, 0.5000, 0.0000, 0.8660, 0.000001, 4.859923, 5.000000, 0.0000, 0.0000, 1.0000, 0.000001, -4.859923, 5.000000, 0.0000, 0.0000, 1.0000, -2.499999, 4.859923, 4.330128, -0.5000, 0.0000, 0.8660, -2.499999, -4.859923, 4.330128, -0.5000, 0.0000, 0.8660, -4.330126, 4.859923, 2.500001, -0.8660, 0.0000, 0.5000, -4.330126, -4.859923, 2.500001, -0.8660, 0.0000, 0.5000, -5.000000, 4.859923, 0.000002, -1.0000, 0.0000, 0.0000, -5.000000, -4.859923, 0.000002, -1.0000, 0.0000, 0.0000, -4.330129, 4.859923, -2.499997, -0.8660, 0.0000, -0.5000, -4.330129, -4.859923, -2.499997, -0.8660, 0.0000, -0.5000, -2.500003, 4.859923, -4.330125, -0.5000, 0.0000, -0.8660, -2.500003, -4.859923, -4.330125, -0.5000, 0.0000, -0.8660, 0.000000, -5.000000, -4.846824, 0.0000, -1.0000, 0.0000, 2.423412, -5.000000, -4.197472, 0.0000, -1.0000, 0.0000, 2.423412, 5.000000, -4.197472, 0.0000, 1.0000, 0.0000, 0.000000, 5.000000, -4.846824, 0.0000, 1.0000, 0.0000, 4.197473, -5.000000, -2.423412, 0.0000, -1.0000, 0.0000, 4.197473, 5.000000, -2.423412, 0.0000, 1.0000, 0.0000, 4.846824, -5.000000, 0.000000, 0.0000, -1.0000, 0.0000, 4.846824, 5.000000, 0.000000, 0.0000, 1.0000, 0.0000, 4.197472, -5.000000, 2.423412, 0.0000, -1.0000, 0.0000, 4.197472, 5.000000, 2.423412, 0.0000, 1.0000, 0.0000, 2.423412, -5.000000, 4.197472, 0.0000, -1.0000, 0.0000, 2.423412, 5.000000, 4.197472, 0.0000, 1.0000, 0.0000, 0.000001, -5.000000, 4.846824, 0.0000, -1.0000, 0.0000, 0.000001, 5.000000, 4.846824, 0.0000, 1.0000, 0.0000, -2.423411, -5.000000, 4.197473, 0.0000, -1.0000, 0.0000, -2.423411, 5.000000, 4.197473, 0.0000, 1.0000, 0.0000, -4.197471, -5.000000, 2.423413, 0.0000, -1.0000, 0.0000, -4.197471, 5.000000, 2.423413, 0.0000, 1.0000, 0.0000, -4.846824, -5.000000, 0.000002, 0.0000, -1.0000, 0.0000, -4.846824, 5.000000, 0.000002, 0.0000, 1.0000, 0.0000, -4.197474, -5.000000, -2.423409, 0.0000, -1.0000, 0.0000, -4.197474, 5.000000, -2.423409, 0.0000, 1.0000, 0.0000, -2.423415, -5.000000, -4.197471, 0.0000, -1.0000, 0.0000, -2.423415, 5.000000, -4.197471, 0.0000, 1.0000, 0.0000],
	[0.000000, -5.000000, 0.000000, 0.0000, -1.0000, 0.0000, 0.000000, 5.000000, -0.000000, 0.0000, 1.0000, 0.0000, 0.000000, -5.000000, -5.000000, 0.0000, -0.5036, -0.8639, 0.975452, -5.000000, -4.903926, 0.1685, -0.5036, -0.8473, 1.913417, -5.000000, -4.619398, 0.3306, -0.5036, -0.7982, 2.777851, -5.000000, -4.157348, 0.4800, -0.5036, -0.7183, 3.535534, -5.000000, -3.535534, 0.6109, -0.5036, -0.6109, 4.157348, -5.000000, -2.777851, 0.7183, -0.5036, -0.4800, 4.619398, -5.000000, -1.913417, 0.7982, -0.5036, -0.3306, 4.903926, -5.000000, -0.975452, 0.8473, -0.5036, -0.1685, 5.000000, -5.000000, -0.000000, 0.8639, -0.5036, 0.0000, 4.903926, -5.000000, 0.975451, 0.8473, -0.5036, 0.1685, 4.619398, -5.000000, 1.913416, 0.7982, -0.5036, 0.3306, 4.157348, -5.000000, 2.777851, 0.7183, -0.5036, 0.4800, 3.535534, -5.000000, 3.535534, 0.6109, -0.5036, 0.6109, 2.777851, -5.000000, 4.157348, 0.4800, -0.5036, 0.7183, 1.913416, -5.000000, 4.619398, 0.3306, -0.5036, 0.7982, 0.975450, -5.000000, 4.903926, 0.1685, -0.5036, 0.8473, -0.000002, -5.000000, 5.000000, 0.0000, -0.5036, 0.8639, -0.975454, -5.000000, 4.903926, -0.1685, -0.5036, 0.8473, -1.913419, -5.000000, 4.619397, -0.3306, -0.5036, 0.7982, -2.777853, -5.000000, 4.157347, -0.4800, -0.5036, 0.7183, -3.535536, -5.000000, 3.535532, -0.6109, -0.5036, 0.6109, -4.157350, -5.000000, 2.777848, -0.7183, -0.5036, 0.4800, -4.619399, -5.000000, 1.913413, -0.7982, -0.5036, 0.3306, -4.903927, -5.000000, 0.975447, -0.8473, -0.5036, 0.1685, -5.000000, -5.000000, -0.000005, -0.8639, -0.5036, 0.0000, -4.903925, -5.000000, -0.975457, -0.8473, -0.5036, -0.1685, -4.619395, -5.000000, -1.913422, -0.7982, -0.5036, -0.3306, -4.157345, -5.000000, -2.777856, -0.7183, -0.5036, -0.4800, -3.535529, -5.000000, -3.535538, -0.6109, -0.5036, -0.6109, -2.777846, -5.000000, -4.157352, -0.4800, -0.5036, -0.7183, -1.913410, -5.000000, -4.619401, -0.3306, -0.5036, -0.7982, -0.975444, -5.000000, -4.903928, -0.1685, -0.5036, -0.8473, 0.000000, -4.909735, -4.954958, 0.0000, 0.4468, -0.8946, 0.966664, -4.909735, -4.859750, 0.1745, 0.4468, -0.8774, 1.896180, -4.909735, -4.577784, 0.3423, 0.4468, -0.8265, 2.752827, -4.909735, -4.119897, 0.4970, 0.4468, -0.7438, 3.503684, -4.909735, -3.503684, 0.6326, 0.4468, -0.6326, 4.119897, -4.909735, -2.752827, 0.7438, 0.4468, -0.4970, 4.577784, -4.909735, -1.896180, 0.8265, 0.4468, -0.3423, 4.859750, -4.909735, -0.966664, 0.8774, 0.4468, -0.1745, 4.954958, -4.909735, -0.000000, 0.8946, 0.4468, 0.0000, 4.859750, -4.909735, 0.966664, 0.8774, 0.4468, 0.1745, 4.577784, -4.909735, 1.896179, 0.8265, 0.4468, 0.3423, 4.119897, -4.909735, 2.752827, 0.7438, 0.4468, 0.4970, 3.503684, -4.909735, 3.503684, 0.6326, 0.4468, 0.6326, 2.752827, -4.909735, 4.119897, 0.4970, 0.4468, 0.7438, 1.896179, -4.909735, 4.577785, 0.3423, 0.4468, 0.8265, 0.966663, -4.909735, 4.859750, 0.1745, 0.4468, 0.8774, -0.000002, -4.909735, 4.954958, 0.0000, 0.4468, 0.8946, -0.966666, -4.909735, 4.859749, -0.1745, 0.4468, 0.8774, -1.896182, -4.909735, 4.577783, -0.3423, 0.4468, 0.8265, -2.752829, -4.909735, 4.119895, -0.4970, 0.4468, 0.7438, -3.503686, -4.909735, 3.503682, -0.6326, 0.4468, 0.6326, -4.119899, -4.909735, 2.752824, -0.7438, 0.4468, 0.4970, -4.577785, -4.909735, 1.896176, -0.8265, 0.4468, 0.3423, -4.859751, -4.909735, 0.966660, -0.8774, 0.4468, 0.1745, -4.954958, -4.909735, -0.000005, -0.8946, 0.4468, 0.0000, -4.859749, -4.909735, -0.966669, -0.8774, 0.4468, -0.1745, -4.577782, -4.909735, -1.896185, -0.8265, 0.4468, -0.3423, -4.119894, -4.909735, -2.752832, -0.7438, 0.4468, -0.4970, -3.503680, -4.909735, -3.503688, -0.6326, 0.4468, -0.6326, -2.752821, -4.909735, -4.119901, -0.4970, 0.4468, -0.7438, -1.896173, -4.909735, -4.577786, -0.3423, 0.4468, -0.8265, -0.966657, -4.909735, -4.859751, -0.1745, 0.4468, -0.8774, -0.000000, -5.000000, -4.858602, 0.0000, -1.0000, 0.0000, 0.947866, -5.000000, -4.765245, 0.0000, -1.0000, 0.0000, 1.859307, -5.000000, -4.488763, 0.0000, -1.0000, 0.0000, 2.699295, -5.000000, -4.039780, 0.0000, -1.0000, 0.0000, 3.435550, -5.000000, -3.435550, 0.0000, -1.0000, 0.0000, 4.039780, -5.000000, -2.699294, 0.0000, -1.0000, 0.0000, 4.488763, -5.000000, -1.859306, 0.0000, -1.0000, 0.0000, 4.765245, -5.000000, -0.947866, 0.0000, -1.0000, 0.0000, 4.858602, -5.000000, -0.000000, 0.0000, -1.0000, 0.0000, 4.765245, -5.000000, 0.947866, 0.0000, -1.0000, 0.0000, 4.488763, -5.000000, 1.859306, 0.0000, -1.0000, 0.0000, 4.039780, -5.000000, 2.699294, 0.0000, -1.0000, 0.0000, 3.435550, -5.000000, 3.435550, 0.0000, -1.0000, 0.0000, 2.699294, -5.000000, 4.039780, 0.0000, -1.0000, 0.0000, 1.859306, -5.000000, 4.488763, 0.0000, -1.0000, 0.0000, 0.947865, -5.000000, 4.765245, 0.0000, -1.0000, 0.0000, -0.000002, -5.000000, 4.858602, 0.0000, -1.0000, 0.0000, -0.947868, -5.000000, 4.765244, 0.0000, -1.0000, 0.0000, -1.859309, -5.000000, 4.488762, 0.0000, -1.0000, 0.0000, -2.699297, -5.000000, 4.039778, 0.0000, -1.0000, 0.0000, -3.435553, -5.000000, 3.435548, 0.0000, -1.0000, 0.0000, -4.039782, -5.000000, 2.699292, 0.0000, -1.0000, 0.0000, -4.488764, -5.000000, 1.859303, 0.0000, -1.0000, 0.0000, -4.765246, -5.000000, 0.947862, 0.0000, -1.0000, 0.0000, -4.858602, -5.000000, -0.000005, 0.0000, -1.0000, 0.0000, -4.765244, -5.000000, -0.947871, 0.0000, -1.0000, 0.0000, -4.488760, -5.000000, -1.859311, 0.0000, -1.0000, 0.0000, -4.039777, -5.000000, -2.699300, 0.0000, -1.0000, 0.0000, -3.435546, -5.000000, -3.435555, 0.0000, -1.0000, 0.0000, -2.699289, -5.000000, -4.039783, 0.0000, -1.0000, 0.0000, -1.859300, -5.000000, -4.488766, 0.0000, -1.0000, 0.0000, -0.947859, -5.000000, -4.765246, 0.0000, -1.0000, 0.0000]
];
var Indices = [
	[16, 1, 14, 22, 13, 20, 9, 15, 21, 5, 7, 2, 10, 19, 8, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 7, 6, 3, 2, 1, 9, 5, 4, 8, 11, 10, 6, 19, 18, 21, 10, 9, 20, 23, 22, 18, 13, 12, 15, 22, 21, 14, 17, 16, 12, 1, 0, 4, 16, 15, 18, 0, 6, 16, 3, 1, 22, 17, 13, 9, 4, 15, 5, 11, 7, 10, 23, 19, 0, 2, 7, 3, 5, 2, 9, 11, 5, 8, 7, 11, 6, 8, 19, 21, 23, 10, 20, 19, 23, 18, 20, 13, 15, 17, 22, 14, 13, 17, 12, 14, 1, 4, 3, 16, 18, 12, 0],
	[1, 5, 6, 91, 11, 92, 3, 9, 4, 1, 7, 2, 0, 12, 5, 55, 92, 11, 4, 10, 91, 2, 8, 3, 9, 16, 17, 6, 15, 7, 5, 12, 13, 55, 11, 19, 9, 18, 10, 7, 16, 8, 6, 13, 14, 10, 19, 11, 55, 19, 26, 18, 24, 25, 15, 23, 16, 14, 20, 21, 18, 26, 19, 17, 23, 24, 15, 21, 22, 13, 12, 20, 22, 30, 23, 21, 27, 28, 25, 33, 26, 24, 30, 31, 21, 29, 22, 20, 12, 27, 55, 26, 33, 24, 32, 25, 32, 40, 33, 30, 38, 31, 29, 35, 36, 27, 12, 34, 55, 33, 40, 31, 39, 32, 29, 37, 30, 28, 34, 35, 36, 42, 43, 34, 12, 41, 55, 40, 47, 38, 46, 39, 36, 44, 37, 35, 41, 42, 39, 47, 40, 38, 44, 45, 55, 47, 54, 45, 53, 46, 43, 51, 44, 42, 48, 49, 46, 54, 47, 44, 52, 45, 42, 50, 43, 41, 12, 48, 49, 56, 57, 53, 62, 54, 51, 60, 52, 49, 58, 50, 48, 12, 56, 55, 54, 62, 53, 60, 61, 50, 59, 51, 61, 69, 62, 59, 67, 60, 57, 65, 58, 56, 12, 63, 55, 62, 69, 60, 68, 61, 59, 65, 66, 56, 64, 57, 63, 12, 70, 55, 69, 76, 67, 75, 68, 66, 72, 73, 64, 70, 71, 68, 76, 69, 66, 74, 67, 65, 71, 72, 74, 82, 75, 72, 80, 73, 71, 77, 78, 76, 82, 83, 73, 81, 74, 71, 79, 72, 70, 12, 77, 55, 76, 83, 82, 90, 83, 80, 88, 81, 78, 86, 79, 77, 12, 84, 55, 83, 90, 81, 89, 82, 79, 87, 80, 78, 84, 85, 87, 4, 88, 85, 2, 86, 84, 12, 0, 55, 90, 92, 88, 91, 89, 86, 3, 87, 84, 1, 85, 89, 92, 90, 1, 0, 5, 91, 10, 11, 3, 8, 9, 1, 6, 7, 4, 9, 10, 2, 7, 8, 9, 8, 16, 6, 14, 15, 9, 17, 18, 7, 15, 16, 6, 5, 13, 10, 18, 19, 18, 17, 24, 15, 22, 23, 14, 13, 20, 18, 25, 26, 17, 16, 23, 15, 14, 21, 22, 29, 30, 21, 20, 27, 25, 32, 33, 24, 23, 30, 21, 28, 29, 24, 31, 32, 32, 39, 40, 30, 37, 38, 29, 28, 35, 31, 38, 39, 29, 36, 37, 28, 27, 34, 36, 35, 42, 38, 45, 46, 36, 43, 44, 35, 34, 41, 39, 46, 47, 38, 37, 44, 45, 52, 53, 43, 50, 51, 42, 41, 48, 46, 53, 54, 44, 51, 52, 42, 49, 50, 49, 48, 56, 53, 61, 62, 51, 59, 60, 49, 57, 58, 53, 52, 60, 50, 58, 59, 61, 68, 69, 59, 66, 67, 57, 64, 65, 60, 67, 68, 59, 58, 65, 56, 63, 64, 67, 74, 75, 66, 65, 72, 64, 63, 70, 68, 75, 76, 66, 73, 74, 65, 64, 71, 74, 81, 82, 72, 79, 80, 71, 70, 77, 76, 75, 82, 73, 80, 81, 71, 78, 79, 82, 89, 90, 80, 87, 88, 78, 85, 86, 81, 88, 89, 79, 86, 87, 78, 77, 84, 87, 3, 4, 85, 1, 2, 88, 4, 91, 86, 2, 3, 84, 0, 1, 89, 91, 92],
	[0, 50, 51, 1, 52, 53, 3, 28, 27, 0, 51, 54, 1, 55, 52, 5, 30, 28, 0, 54, 56, 1, 57, 55, 7, 32, 30, 0, 56, 58, 1, 59, 57, 9, 34, 32, 0, 58, 60, 1, 61, 59, 11, 36, 34, 0, 60, 62, 1, 63, 61, 13, 38, 36, 0, 62, 64, 1, 65, 63, 15, 40, 38, 0, 64, 66, 1, 67, 65, 17, 42, 40, 0, 66, 68, 1, 69, 67, 19, 44, 42, 0, 68, 70, 1, 71, 69, 21, 46, 44, 0, 70, 72, 1, 73, 71, 23, 48, 46, 0, 72, 50, 1, 53, 73, 25, 27, 48, 49, 2, 24, 48, 26, 49, 47, 24, 22, 46, 49, 47, 45, 22, 20, 44, 47, 45, 43, 20, 18, 42, 45, 43, 41, 18, 16, 40, 43, 41, 39, 16, 14, 38, 41, 39, 37, 14, 12, 36, 39, 37, 35, 12, 10, 34, 37, 35, 33, 10, 8, 32, 35, 33, 31, 8, 6, 30, 33, 31, 29, 6, 4, 28, 31, 29, 26, 4, 2, 27, 29, 26, 51, 2, 4, 52, 3, 53, 51, 6, 54, 55, 5, 52, 54, 8, 56, 57, 7, 55, 58, 8, 10, 59, 9, 57, 58, 12, 60, 61, 11, 59, 60, 14, 62, 63, 13, 61, 64, 14, 16, 63, 17, 15, 64, 18, 66, 65, 19, 17, 66, 20, 68, 67, 21, 19, 68, 22, 70, 71, 21, 69, 70, 24, 72, 71, 25, 23, 72, 2, 50, 73, 3, 25, 3, 5, 28, 5, 7, 30, 7, 9, 32, 9, 11, 34, 11, 13, 36, 13, 15, 38, 15, 17, 40, 17, 19, 42, 19, 21, 44, 21, 23, 46, 23, 25, 48, 25, 3, 27, 49, 26, 2, 48, 27, 26, 47, 49, 24, 46, 48, 49, 45, 47, 22, 44, 46, 47, 43, 45, 20, 42, 44, 45, 41, 43, 18, 40, 42, 43, 39, 41, 16, 38, 40, 41, 37, 39, 14, 36, 38, 39, 35, 37, 12, 34, 36, 37, 33, 35, 10, 32, 34, 35, 31, 33, 8, 30, 32, 33, 29, 31, 6, 28, 30, 31, 26, 29, 4, 27, 28, 29, 51, 50, 2, 52, 5, 3, 51, 4, 6, 55, 7, 5, 54, 6, 8, 57, 9, 7, 58, 56, 8, 59, 11, 9, 58, 10, 12, 61, 13, 11, 60, 12, 14, 63, 15, 13, 64, 62, 14, 63, 65, 17, 64, 16, 18, 65, 67, 19, 66, 18, 20, 67, 69, 21, 68, 20, 22, 71, 23, 21, 70, 22, 24, 71, 73, 25, 72, 24, 2, 73, 53, 3],
	[0, 66, 67, 1, 35, 34, 0, 67, 68, 1, 36, 35, 0, 68, 69, 1, 37, 36, 0, 69, 70, 1, 38, 37, 0, 70, 71, 38, 1, 39, 0, 71, 72, 1, 40, 39, 0, 72, 73, 1, 41, 40, 0, 73, 74, 1, 42, 41, 0, 74, 75, 1, 43, 42, 0, 75, 76, 1, 44, 43, 0, 76, 77, 1, 45, 44, 0, 77, 78, 1, 46, 45, 0, 78, 79, 46, 1, 47, 0, 79, 80, 1, 48, 47, 0, 80, 81, 1, 49, 48, 0, 81, 82, 49, 1, 50, 0, 82, 83, 1, 51, 50, 0, 83, 84, 1, 52, 51, 0, 84, 85, 1, 53, 52, 0, 85, 86, 1, 54, 53, 0, 86, 87, 1, 55, 54, 0, 87, 88, 1, 56, 55, 0, 88, 89, 1, 57, 56, 0, 89, 90, 1, 58, 57, 0, 90, 91, 1, 59, 58, 0, 91, 92, 1, 60, 59, 0, 92, 93, 1, 61, 60, 0, 93, 94, 1, 62, 61, 0, 94, 95, 62, 1, 63, 0, 95, 96, 1, 64, 63, 0, 96, 97, 1, 65, 64, 0, 97, 66, 1, 34, 65, 65, 2, 33, 64, 33, 32, 63, 32, 31, 62, 31, 30, 61, 30, 29, 60, 29, 28, 59, 28, 27, 58, 27, 26, 57, 26, 25, 56, 25, 24, 55, 24, 23, 22, 55, 23, 53, 22, 21, 52, 21, 20, 51, 20, 19, 50, 19, 18, 49, 18, 17, 48, 17, 16, 15, 48, 16, 46, 15, 14, 45, 14, 13, 44, 13, 12, 43, 12, 11, 42, 11, 10, 41, 10, 9, 40, 9, 8, 7, 40, 8, 38, 7, 6, 37, 6, 5, 36, 5, 4, 35, 4, 3, 2, 35, 3, 66, 3, 67, 68, 3, 4, 68, 5, 69, 69, 6, 70, 71, 6, 7, 72, 7, 8, 72, 9, 73, 73, 10, 74, 75, 10, 11, 75, 12, 76, 76, 13, 77, 77, 14, 78, 79, 14, 15, 79, 16, 80, 80, 17, 81, 82, 17, 18, 83, 18, 19, 83, 20, 84, 84, 21, 85, 85, 22, 86, 87, 22, 23, 87, 24, 88, 88, 25, 89, 89, 26, 90, 90, 27, 91, 91, 28, 92, 92, 29, 93, 93, 30, 94, 94, 31, 95, 95, 32, 96, 96, 33, 97, 66, 33, 2, 65, 34, 2, 64, 65, 33, 63, 64, 32, 62, 63, 31, 61, 62, 30, 60, 61, 29, 59, 60, 28, 58, 59, 27, 57, 58, 26, 56, 57, 25, 55, 56, 24, 22, 54, 55, 53, 54, 22, 52, 53, 21, 51, 52, 20, 50, 51, 19, 49, 50, 18, 48, 49, 17, 15, 47, 48, 46, 47, 15, 45, 46, 14, 44, 45, 13, 43, 44, 12, 42, 43, 11, 41, 42, 10, 40, 41, 9, 7, 39, 40, 38, 39, 7, 37, 38, 6, 36, 37, 5, 35, 36, 4, 2, 34, 35, 66, 2, 3, 68, 67, 3, 68, 4, 5, 69, 5, 6, 71, 70, 6, 72, 71, 7, 72, 8, 9, 73, 9, 10, 75, 74, 10, 75, 11, 12, 76, 12, 13, 77, 13, 14, 79, 78, 14, 79, 15, 16, 80, 16, 17, 82, 81, 17, 83, 82, 18, 83, 19, 20, 84, 20, 21, 85, 21, 22, 87, 86, 22, 87, 23, 24, 88, 24, 25, 89, 25, 26, 90, 26, 27, 91, 27, 28, 92, 28, 29, 93, 29, 30, 94, 30, 31, 95, 31, 32, 96, 32, 33, 66, 97, 33]
];
var sculptVerts = [];
var sculptIndices = [];

var currentBrush = -1;
var boolMode = 0; //0 = Union, 1 = Subtraction
var brushBuilder = new MeshBuilder([
	{ name: "position", components: 3},
	{ name: "normal"  , components: 3, normalized:true}
]);
brushBuilder.topology = MeshTopology.Triangles;
brushBuilder.indexType = MeshIndexType.UInt16;

var sculptBuilder = new MeshBuilder([
	{ name: "position", components: 3},
	{ name: "normal"  , components: 3, normalized:true}
]);
sculptBuilder.topology = MeshTopology.Triangles;
sculptBuilder.indexType = MeshIndexType.UInt16;

SwitchBrush(script.StartingBrush);

function SwitchBrush(brush){
	if(currentBrush != -1){
		brushBuilder.eraseVertices(0,brushBuilder.getVerticesCount());
		brushBuilder.eraseIndices(0,brushBuilder.getIndicesCount());
	}
	brushBuilder.topology = MeshTopology.Triangles;
	brushBuilder.indexType = MeshIndexType.UInt16;
	brushBuilder.appendVerticesInterleaved(Vertices[brush]);
	brushBuilder.appendIndices(Indices[brush]);
	if(brushBuilder.isValid()){
		script.brushMesh.mesh = brushBuilder.getMesh();
		brushBuilder.updateMesh();
	}else{
		print("Mesh data invalid!");
	}
	currentBrush = brush;
}

var event = script.createEvent("TapEvent");
event.bind(function(eventData){
	if(eventData.getTapPosition().y < 0.5){
		var tempBrush = currentBrush + 1;
		if(tempBrush > 3){
			tempBrush = 0;
		}
		SwitchBrush(tempBrush);
	}else{
		BooleanTheMeshes(boolMode);
	}
});

function BooleanTheMeshes(){
	var brushVerts = MoveVerts(Vertices[currentBrush],script.Brush);
	if(sculptVerts.length == 0){
		sculptVerts = brushVerts;
		sculptIndices = Indices[currentBrush];
		BuildSculpt();
		return;
	}
	
	var AABBSculpt = GetAABB(sculptVerts);
	var AABBBrush = GetAABB(brushVerts);
	var Intersection = CalcIntersection(AABBSculpt, AABBBrush);
	
	if(Intersection == [0,0,0,0,0,0]){
		AddSeparatedMesh(Vertices[currentBrush],Indices[currentBrush]);
		return;
	}
	
	var usedTris = [[],[]];
	var sculptTris = [];
	for(var i = 0; i < sculptVerts.length / 6; i+=6){
		sculptTris.push(GetAABB([sculptVerts[i], sculptVerts[i+1], sculptVerts[i+2]]));
		usedTris[0].push(i);
	}
	var brushTris = [];
	for(var i = 0; i < Vertices[currentBrush].length / 6; i+=6){
		brushTris.push(GetAABB([Vertices[currentBrush][i], Vertices[currentBrush][i+1], Vertices[currentBrush][i+2]]));
		usedTris[1].push(i);
	}
	
	var fullTriList = [sculptTris, brushTris];
	Intersection = CubifyAABB(Intersection);
	var IntersectedPairs = OctreeAABB(Intersection, usedTris, fullTriList, 0);
}

function MoveVerts(verts, object){
	var pos = object.getTransform().getWorldPosition().add(new vec3(0,-5,0));
	var rot = object.getTransform().getWorldRotation();
	var rotVec = new vec3(rot.x*-1, rot.y*-1, rot.z*-1);
	var scl = object.getTransform().getWorldScale();
	var output = verts.slice(0);
	var point;
	for(var i = 0; i < verts.length; i+=6){
		point = new vec3(verts[i], verts[i+1], verts[i+2]);
		//Note: I found this on https://blog.molecular-matters.com/2013/05/24/a-faster-quaternion-vector-multiplication/ and I don't know how it works
		t = point.cross(rotVec);
		t = t.uniformScale(2);
		point = point.add(t.uniformScale(rot.w));
		point = point.add(t.cross(rotVec));
		//End Note
		
		point = point.add(pos);
		point = point.mult(scl);
		
		output[i] = point.x;
		output[i+1] = point.y;
		output[i+2] = point.z;
	}
	return output;
}

function GetAABB(input){
	//AABB Format: [minX, minY, minZ, maxX, maxY, maxZ]
	var output = [input[0], input[1], input[2],input[0],input[1],input[2]];
	for(var i = 6; i < input.length; i += 6){
		if(input[i] > output[3]){
			output[3] = input[i];
		}else if(input[i] < output[0]){
			output[0] = input[i];
		}
		if(input[i+1] > output[4]){
			output[4] = input[i+1];
		}else if(input[i+1] < output[1]){
			output[1] = input[i+1];
		}
		if(input[i+2] > output[5]){
			output[5] = input[i+2];
		}else if(input[i+2] < output[2]){
			output[2] = input[i+2];
		}
	}
	return output;
}

function CalcIntersection(AABB1, AABB2){
	var output = [0,0,0,0,0,0];
	var overlaps = [false,false,false];
	for(var i = 0; i < 3; i++){
		if(AABB1[i] < AABB2[i+3] && AABB1[i+3] > AABB2[i]){
			if(AABB1[i] < AABB2[i] && AABB1[i+3] > AABB2[i+3]){
				output[i+3] = AABB2[i+3];
				output[i] = AABB2[i];
			}else if(AABB1[i] > AABB2[i] && AABB1[i+3] < AABB2[i+3]){
				output[i+3] = AABB1[i+3];
				output[i+0] = AABB1[i+0];
			}else if (AABB1[i+3] < AABB2[i+3]){
				output[i+3] = AABB1[i+3];
				output[i] = AABB2[i];
			}else if(AABB1[i] > AABB2[i]){
				output[i] = AABB1[i];
				output[i+3] = AABB2[i+3];
			}
		}else{
			return [0,0,0,0,0,0];
		}
	}
	return output;
}

function TestIntersection(AABB1, AABB2) {
	if(AABB1[0] < AABB2[3] && AABB1[3] > AABB2[0] && AABB1[1] < AABB2[4] && AABB1[4] > AABB2[1] && AABB1[2] < AABB2[5] && AABB1[5] > AABB2[2]){
		return true;	
	}
	return false;
}

function BuildSculpt(){
	if(sculptBuilder.getVerticesCount > 0){	
		sculptBuilder.eraseVertices(0,sculptBuilder.getVerticesCount());
		sculptBuilder.eraseIndices(0,sculptBuilder.getIndicesCount());
	}
	sculptBuilder.appendVerticesInterleaved(sculptVerts);
	sculptBuilder.appendIndices(sculptIndices);
	if(sculptBuilder.isValid()){
		script.sculptMesh.mesh = sculptBuilder.getMesh();
		sculptBuilder.updateMesh();
	}else{
		print("Sculpt mesh data invalid!");
	}
}

function CubifyAABB(input){
	var sizes = [input[3] - input[0], input[4] - input[1], input[5] - input[2]];
	var output = [0,0,0,0,0,0];
	var size;
	if(sizes[0] >= sizes[1] && sizes[0] >= sizes[2]){
		size = sizes[0];
	}else if(sizes[1] >= sizes[0] && sizes[1] >= sizes[2]){
		size = sizes[1];
	}else if(sizes[2] >= sizes[0] && sizes[2] >= sizes[1]){
		size = sizes[2];
	}
	for(var i = 0; i < 3; i++){
		output[i] = input[i] - ((size - sizes[i])/2);
		output[i+3] = input[i+3] - ((size - sizes[i])/2);
	}
	return output;
}

function OctreeAABB(AABB, triNums, tris, depth){ //Returns pairs of triangles in the form [[triNum1],[triNum2]]
	var output = [[],[]];
	var usedTris = [[],[]];
	for(var i = 0; i < triNums[0].length; i++){
		if(TestIntersection(AABB, triNums[0][i]))
			usedTris[0].push(i);
	}
	for(var i = 0; i < triNums[1].length; i++){
		if(TestIntersection(AABB, triNums[1][i]))
			usedTris[1].push(i);
	}
	if(usedTris[0].length == 0 || usedTris[1].length == 0){
		return output;
	}
	if(depth > 20){
		for(var i = 0; i < usedTris[0].length; i++){
			for(var j = 0; j < usedTris[1].length; j++){
				output[0].push(usedTris[0][i]);
				output[1].push(usedTris[1][j]);
			}
		}
		return output;
	}
	if(usedTris[0].length + usedTris[1].length <= 4){
		for(var i = 0; i < usedTris[0].length; i++){
			for(var j = 0; j < usedTris[1].length; j++){
				output[0].push(usedTris[0][i]);
				output[1].push(usedTris[1][j]);
			}
		}
		return output;
	}
	var newX = (AABB[3]+AABB[0])/2;
	var newY = (AABB[4]+AABB[1])/2;
	var newZ = (AABB[5]+AABB[2])/2;
	output.concat(OctreeAABB([newX,newY,newZ,AABB[3],AABB[4],AABB[5]], usedTris, tris, depth+1));
	output.concat(OctreeAABB([newX,newY,AABB[2],AABB[3],AABB[4],newZ], usedTris, tris, depth+1));
	output.concat(OctreeAABB([newX,AABB[1],newZ,AABB[3],newY,AABB[5]], usedTris, tris, depth+1));
	output.concat(OctreeAABB([newX,AABB[1],AABB[2],AABB[3],newY,newZ], usedTris, tris, depth+1));
	output.concat(OctreeAABB([AABB[0],newY,newZ,newX,AABB[4],AABB[5]], usedTris, tris, depth+1));
	output.concat(OctreeAABB([AABB[0],newY,AABB[2],newX,AABB[4],newZ], usedTris, tris, depth+1));
	output.concat(OctreeAABB([AABB[0],AABB[1],newZ,newX,newY,AABB[5]], usedTris, tris, depth+1));
	output.concat(OctreeAABB([AABB[0],AABB[1],AABB[2],newX,newY,newZ], usedTris, tris, depth+1));
	return output;
}

function AddSeparatedMesh(verts, indices){
	//TODO
}